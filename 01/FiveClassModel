# coding:utf8

import torch
import torch.nn as nn
import numpy as np
import random
import json
import matplotlib.pyplot as plt

"""


规律：x是一个5维向量，数值最大的维度索引+1即为类别（1-5）

"""

class TorchModel(nn.Module):
    def __init__(self, input_size):
        super(TorchModel, self).__init__()
        self.linear = nn.Linear(input_size, 5)  # 输出5个节点
        self.loss = nn.functional.cross_entropy  # 交叉熵损失

    # 前向计算（直接输出logits）
    def forward(self, x, y=None):
        y_pred = self.linear(x)  # 输出shape: (batch_size, 5)
        if y is not None:
            return self.loss(y_pred, y.squeeze(-1).long())  # 处理标签形状和类型
        else:
            return y_pred

# 生成一个样本
def build_sample():
    x = np.random.random(5)
    # 找到最大值索引（0-4），对应类别1-5
    max_index = np.argmax(x)
    return x, max_index  # 返回索引作为标签（0-4）

# 生成数据集
def build_dataset(total_sample_num):
    X = []
    Y = []
    for _ in range(total_sample_num):
        x, y = build_sample()
        X.append(x)
        Y.append([y])
    return torch.FloatTensor(X), torch.LongTensor(Y)  # 标签用LongTensor

# 评估模型
def evaluate(model):
    model.eval()
    test_sample_num = 100
    x, y = build_dataset(test_sample_num)
    
    # 统计各类别数量
    class_count = [0] * 5
    for label in y:
        class_count[label] += 1
    print("各类别样本数量：", class_count)
    
    correct, wrong = 0, 0
    with torch.no_grad():
        y_pred = model(x)  # 获取logits
        # 转换为概率并取最大索引
        probabilities = torch.softmax(y_pred, dim=1)
        predicted = torch.argmax(probabilities, dim=1)
        
        # 计算正确率
        correct = (predicted == y.squeeze(-1)).sum().item()
        wrong = test_sample_num - correct
        
    print(f"正确预测个数：{correct}, 正确率：{correct/(correct+wrong):.4f}")
    return correct / (correct + wrong)

def main():
    # 配置参数
    epoch_num = 20
    batch_size = 20
    train_sample = 5000
    input_size = 5
    learning_rate = 0.001
    
    # 建立模型
    model = TorchModel(input_size)
    optim = torch.optim.Adam(model.parameters(), lr=learning_rate)
    log = []
    
    # 创建训练集
    train_x, train_y = build_dataset(train_sample)
    
    # 训练过程
    for epoch in range(epoch_num):
        model.train()
        watch_loss = []
        for batch_index in range(train_sample // batch_size):
            x = train_x[batch_index*batch_size : (batch_index+1)*batch_size]
            y = train_y[batch_index*batch_size : (batch_index+1)*batch_size]
            loss = model(x, y)
            loss.backward()
            optim.step()
            optim.zero_grad()
            watch_loss.append(loss.item())
        print("=========\n第%d轮平均loss:%f" % (epoch + 1, np.mean(watch_loss)))
        acc = evaluate(model)
        log.append([acc, float(np.mean(watch_loss))])
    
    # 保存模型
    torch.save(model.state_dict(), "model.pth")
    
    # 画图
    plt.plot(range(len(log)), [l[0] for l in log], label="acc")
    plt.plot(range(len(log)), [l[1] for l in log], label="loss")
    plt.legend()
    plt.show()
    return

# 预测函数
def predict(model_path, input_vec):
    input_size = 5
    model = TorchModel(input_size)
    model.load_state_dict(torch.load(model_path))
    
    model.eval()
    with torch.no_grad():
        y_pred = model(torch.FloatTensor(input_vec))
        probabilities = torch.softmax(y_pred, dim=1)
        predicted_classes = torch.argmax(probabilities, dim=1) + 1  # 转换为1-5类别
    
    for vec, cls, prob in zip(input_vec, predicted_classes, probabilities):
        print(f"输入：{vec} => 预测类别：{cls.item()}，各类别概率：{prob.detach().numpy().round(4)}")

if __name__ == "__main__":
    main()
   
